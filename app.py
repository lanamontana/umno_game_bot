import os
import openai
import telebot
from dotenv import load_dotenv
from datetime import datetime
import random

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
QUESTIONS_DIR = "questions"
os.makedirs(QUESTIONS_DIR, exist_ok=True)

# –°–ª–æ–≤–∞—Ä—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
CATEGORIES = {
    "‚ô£Ô∏è —É–º–Ω–æ–µ": "smart",
    "‚ô¶Ô∏è —Å—Ç—Ä–∞–Ω–Ω–æ–µ": "weird",
    "‚ô•Ô∏è –∏–Ω—Ç–∏–º–Ω–æ–µ": "intimate",
    "‚ô†Ô∏è –¥–µ–π—Å—Ç–≤–∏–µ": "action"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å GPT
def generate_question(category):
    try:
        prompt_map = {
            "smart": "–ü—Ä–∏–¥—É–º–∞–π –≥–ª—É–±–æ–∫–∏–π —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–∞—Ä–Ω–æ–π –∏–≥—Ä—ã.",
            "weird": "–ü—Ä–∏–¥—É–º–∞–π —Å—Ç—Ä–∞–Ω–Ω—ã–π, –∑–∞–±–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–∞—Ä–Ω–æ–π –∏–≥—Ä—ã.",
            "intimate": "–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–∏–º–Ω—ã–π, —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–∞—Ä–Ω–æ–π –∏–≥—Ä—ã.",
            "action": "–ü—Ä–∏–¥—É–º–∞–π –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –¥–≤–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –ø–∞—Ä–Ω–æ–π –∏–≥—Ä–µ."
        }

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt_map[category]}],
            max_tokens=60,
            temperature=0.8,
        )

        question = response.choices[0].message["content"].strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        file_path = os.path.join(QUESTIONS_DIR, f"{category}.txt")
        with open(file_path, "a", encoding="utf-8") as f:
            f.write(question + "\n")

        return question

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ GPT: {e}")
        return load_saved_question(category)

# –ï—Å–ª–∏ GPT –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
def load_saved_question(category):
    file_path = os.path.join(QUESTIONS_DIR, f"{category}.txt")
    if not os.path.exists(file_path):
        return "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ ü´£"
    with open(file_path, "r", encoding="utf-8") as f:
        questions = [q.strip() for q in f if q.strip()]
    return random.choice(questions) if questions else "–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!"

# –ö–æ–º–∞–Ω–¥—ã Telegram-–±–æ—Ç–∞
@bot.message_handler(commands=["start"])
def start_game(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for label in CATEGORIES:
        markup.add(label)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in CATEGORIES)
def ask_question(message):
    category_key = message.text
    category_code = CATEGORIES[category_key]
    question = generate_question(category_code)
    bot.send_message(message.chat.id, f"üÉè {question}")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    bot.infinity_polling()

CATEGORY_NAMES = {
    "smart": "‚ô£Ô∏è —É–º–Ω–æ–µ",
    "strange": "‚ô¶Ô∏è —Å—Ç—Ä–∞–Ω–Ω–æ–µ",
    "intimate": "‚ô•Ô∏è –∏–Ω—Ç–∏–º–Ω–æ–µ",
    "action": "‚ô†Ô∏è –¥–µ–π—Å—Ç–≤–∏–µ"
}


@app.route('/')
def index():
    if 'chat_history' not in session:
        session['chat_history'] = []
    return render_template('index.html', chat_history=session['chat_history'])


@app.route('/start', methods=['POST'])
def start_game():
    if 'chat_history' not in session:
        session['chat_history'] = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session['chat_history'].append({
        'type':
        'user',
        'message':
        '/start',
        'timestamp':
        datetime.now().strftime('%H:%M')
    })

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞
    welcome_message = """–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä–Ω–æ–π –∏–≥—Ä—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏!

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤:

‚ô£Ô∏è —É–º–Ω–æ–µ - –≥–ª—É–±–æ–∫–∏–µ –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
‚ô¶Ô∏è —Å—Ç—Ä–∞–Ω–Ω–æ–µ - –Ω–µ–æ–±—ã—á–Ω—ã–µ –∏ –∑–∞–±–∞–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã  
‚ô•Ô∏è –∏–Ω—Ç–∏–º–Ω–æ–µ - —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚ô†Ô∏è –¥–µ–π—Å—Ç–≤–∏–µ - –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π!"""

    session['chat_history'].append({
        'type':
        'bot',
        'message':
        welcome_message,
        'timestamp':
        datetime.now().strftime('%H:%M')
    })

    session.modified = True
    return redirect(url_for('index'))


@app.route('/question/<category>', methods=['POST'])
def get_question(category):
    if 'chat_history' not in session:
        session['chat_history'] = []

    if category not in QUESTIONS:
        return redirect(url_for('index'))

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    session['chat_history'].append({
        'type':
        'user',
        'message':
        CATEGORY_NAMES[category],
        'timestamp':
        datetime.now().strftime('%H:%M')
    })

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    question = random.choice(QUESTIONS[category])

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –æ—Ç –±–æ—Ç–∞
    session['chat_history'].append({
        'type':
        'bot',
        'message':
        f"üìù {question}",
        'timestamp':
        datetime.now().strftime('%H:%M')
    })

    session.modified = True
    return redirect(url_for('index'))


@app.route('/admin')
def admin():
    return render_template('admin.html', categories=CATEGORY_NAMES)


@app.route('/admin/add_question', methods=['POST'])
def add_question():
    category = request.form.get('category')
    question = request.form.get('question')

    if category in QUESTIONS and question:
        QUESTIONS[category].append(question.strip())
        return redirect(url_for('admin'))

    return redirect(url_for('admin'))


@app.route('/clear_chat', methods=['POST'])
def clear_chat():
    session['chat_history'] = []
    session.modified = True
    return redirect(url_for('index'))


@app.route("/category/<category>")
def category(category):
    if category in QUESTIONS:
        question = random.choice(QUESTIONS[category])
        return render_template('chat.html',
                               question=question,
                               category=category,
                               category_names=CATEGORY_NAMES)
    else:
        return render_template("chat.html", error="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@app.route('/')
def intro():
    return render_template('intro.html')


@app.route('/menu')
def menu():
    return render_template('index.html', category_names=CATEGORY_NAMES)


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)


@app.route('/random_card')
def random_card():
    import random
    category = random.choice(list(QUESTIONS.keys()))
    question = random.choice(QUESTIONS[category])
    return render_template('chat.html',
                           question=question,
                           category=category,
                           category_names=CATEGORY_NAMES)
